diff --git a/drivers/audio/mpxxdtyy-i2s.c b/drivers/audio/mpxxdtyy-i2s.c
index a2eb2103bc..3c44fe224f 100644
--- a/drivers/audio/mpxxdtyy-i2s.c
+++ b/drivers/audio/mpxxdtyy-i2s.c
@@ -16,9 +16,17 @@ LOG_MODULE_DECLARE(mpxxdtyy);
 #if DT_ANY_INST_ON_BUS_STATUS_OKAY(i2s)
 
 #define NUM_RX_BLOCKS			4
-#define PDM_BLOCK_MAX_SIZE_BYTES	512
+#define PDM_BLOCK_MAX_SIZE_BYTES	768
 
-K_MEM_SLAB_DEFINE(rx_pdm_i2s_mslab, PDM_BLOCK_MAX_SIZE_BYTES, NUM_RX_BLOCKS, 1);
+#define K_MEM_SLAB_DEFINE_NOCACHE(name, slab_block_size, slab_num_blocks, slab_align) \
+	char __nocache \
+	   __aligned(WB_UP(slab_align)) \
+	   _k_mem_slab_buf_##name[(slab_num_blocks) * WB_UP(slab_block_size)]; \
+	STRUCT_SECTION_ITERABLE(k_mem_slab, name) = \
+		Z_MEM_SLAB_INITIALIZER(name, _k_mem_slab_buf_##name, \
+					WB_UP(slab_block_size), slab_num_blocks)
+
+K_MEM_SLAB_DEFINE_NOCACHE(rx_pdm_i2s_mslab, PDM_BLOCK_MAX_SIZE_BYTES, NUM_RX_BLOCKS, 1);
 
 int mpxxdtyy_i2s_read(const struct device *dev, uint8_t stream, void **buffer,
 		      size_t *size, int32_t timeout)
@@ -126,8 +134,7 @@ int mpxxdtyy_i2s_configure(const struct device *dev, struct dmic_cfg *cfg)
 
 	i2s_cfg.word_size = chan_size;
 	i2s_cfg.channels = cfg->channel.req_num_chan;
-	i2s_cfg.format = I2S_FMT_DATA_FORMAT_LEFT_JUSTIFIED |
-			 I2S_FMT_BIT_CLK_INV;
+	i2s_cfg.format = I2S_FMT_BIT_CLK_INV;
 	i2s_cfg.options = I2S_OPT_FRAME_CLK_MASTER | I2S_OPT_BIT_CLK_MASTER;
 	i2s_cfg.frame_clk_freq = audio_freq * factor / chan_size;
 	i2s_cfg.block_size = data->pcm_mem_size * (factor / chan_size);
diff --git a/drivers/audio/mpxxdtyy.c b/drivers/audio/mpxxdtyy.c
index 4be45e47c6..d60b983b84 100644
--- a/drivers/audio/mpxxdtyy.c
+++ b/drivers/audio/mpxxdtyy.c
@@ -56,7 +56,7 @@ uint16_t sw_filter_lib_init(const struct device *dev, struct dmic_cfg *cfg)
 	int i;
 
 	/* calculate oversampling factor based on pdm clock */
-	for (factor = 64U; factor <= 128U; factor += 64U) {
+	for (factor = 64U; factor <= 192U; factor += 64U) {
 		uint32_t pdm_bit_clk = (audio_freq * factor *
 				     cfg->channel.req_num_chan);
 
@@ -66,7 +66,7 @@ uint16_t sw_filter_lib_init(const struct device *dev, struct dmic_cfg *cfg)
 		}
 	}
 
-	if (factor != 64U && factor != 128U) {
+	if (factor != 64U && factor != 128U && factor != 192U) {
 		return 0;
 	}
 
@@ -90,7 +90,7 @@ int sw_filter_lib_run(TPDMFilter_InitStruct *pdm_filter,
 		      void *pdm_block, void *pcm_block,
 		      size_t pdm_size, size_t pcm_size)
 {
-	int i;
+	int i, j;
 	uint8_t a, b;
 
 	if (pdm_block == NULL || pcm_block == NULL || pdm_filter == NULL) {
@@ -118,23 +118,46 @@ int sw_filter_lib_run(TPDMFilter_InitStruct *pdm_filter,
 		}
 	}
 
+	// TODO: call Open_PDM_Filter_x once for each ms of data
 	switch (pdm_filter[0].Decimation) {
 	case 64:
 		for (i = 0; i < pdm_filter[0].In_MicChannels; i++) {
-			Open_PDM_Filter_64(&((uint8_t *) pdm_block)[i],
-					   &((uint16_t *) pcm_block)[i],
-					   pdm_filter->MaxVolume,
-					   &pdm_filter[i]);
+			for (j = 0; j < pcm_size / 2; j += pdm_filter[i].Fs / 1000)
+			{
+				int pcm_start = j;
+				int pdm_start = j * (pdm_filter[i].Decimation >> 3) + i;
+				Open_PDM_Filter_64(&((uint8_t *) pdm_block)[pdm_start + i],
+							&((uint16_t *) pcm_block)[pcm_start + i],
+							pdm_filter->MaxVolume,
+							&pdm_filter[i]);
+			}
 		}
 		break;
 	case 128:
 		for (i = 0; i < pdm_filter[0].In_MicChannels; i++) {
-			Open_PDM_Filter_128(&((uint8_t *) pdm_block)[i],
-					    &((uint16_t *) pcm_block)[i],
-					    pdm_filter->MaxVolume,
-					    &pdm_filter[i]);
+			for (j = 0; j < pcm_size / 2; j += pdm_filter[i].Fs / 1000)
+			{
+				int pcm_start = j;
+				int pdm_start = j * (pdm_filter[i].Decimation >> 3) + i;
+				Open_PDM_Filter_128(&((uint8_t *) pdm_block)[pdm_start + i],
+							&((uint16_t *) pcm_block)[pcm_start + i],
+							pdm_filter->MaxVolume,
+							&pdm_filter[i]);
+			}
 		}
 		break;
+	case 192:
+		for (i = 0; i < pdm_filter[0].In_MicChannels; i++) {
+			for (j = 0; j < pcm_size / 2; j += pdm_filter[i].Fs / 1000)
+			{
+				int pcm_start = j;
+				int pdm_start = j * (pdm_filter[i].Decimation >> 3) + i;
+				Open_PDM_Filter_192(&((uint8_t *) pdm_block)[pdm_start + i],
+							&((uint16_t *) pcm_block)[pcm_start + i],
+							pdm_filter->MaxVolume,
+							&pdm_filter[i]);
+			}
+		}
 	default:
 		return -EINVAL;
 	}
@@ -163,12 +186,16 @@ static int mpxxdtyy_initialize(const struct device *dev)
 	return 0;
 }
 
-static const struct mpxxdtyy_config mpxxdtyy_config = {
-	.comm_master = DEVICE_DT_GET(DT_INST_BUS(0)),
-};
-
-static struct mpxxdtyy_data mpxxdtyy_data;
-
-DEVICE_DT_INST_DEFINE(0, mpxxdtyy_initialize, NULL, &mpxxdtyy_data,
-		      &mpxxdtyy_config, POST_KERNEL,
-		      CONFIG_AUDIO_DMIC_INIT_PRIORITY, &mpxxdtyy_driver_api);
+#define MPXXDTYY_INIT(index)							\
+static const struct mpxxdtyy_config mpxxdtyy_config_##index = { \
+	.comm_master = DEVICE_DT_GET(DT_INST_BUS(index)), \
+}; \
+\
+static struct mpxxdtyy_data mpxxdtyy_data_##index; \
+\
+DEVICE_DT_INST_DEFINE(index, mpxxdtyy_initialize, NULL, &mpxxdtyy_data_##index, \
+		      &mpxxdtyy_config_##index, POST_KERNEL, \
+		      CONFIG_AUDIO_DMIC_INIT_PRIORITY, &mpxxdtyy_driver_api); \
+\
+
+DT_INST_FOREACH_STATUS_OKAY(MPXXDTYY_INIT)
diff --git a/include/zephyr/dt-bindings/clock/stm32f7_clock.h b/include/zephyr/dt-bindings/clock/stm32f7_clock.h
index 92d3b7e122..badffe4c64 100644
--- a/include/zephyr/dt-bindings/clock/stm32f7_clock.h
+++ b/include/zephyr/dt-bindings/clock/stm32f7_clock.h
@@ -37,6 +37,9 @@
 /** Peripheral bus clock */
 #define STM32_SRC_PCLK		(STM32_SRC_PLL_R + 1)
 
+/** ADDED: PLLI2S output */
+#define STM32_SRC_PLLI2S_R 	(STM32_SRC_PCLK + 1)
+
 
 #define STM32_CLOCK_REG_MASK    0xFFU
 #define STM32_CLOCK_REG_SHIFT   0U
